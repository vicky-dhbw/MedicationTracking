// <auto-generated />
using System;
using Data.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(MedicationTrackingContext))]
    partial class MedicationTrackingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Data.Models.MedAdministrationLog", b =>
                {
                    b.Property<int>("MedLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("MedLogId"));

                    b.Property<string>("MedAdminNote")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("MedAdminStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("MedAdminTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("int");

                    b.HasKey("MedLogId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("MedAdministrationLogs");
                });

            modelBuilder.Entity("Data.Models.MedicationEffect", b =>
                {
                    b.Property<int>("EffectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EffectId"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("varchar(24)");

                    b.Property<int>("MedicineId")
                        .HasColumnType("int");

                    b.HasKey("EffectId");

                    b.HasIndex("MedicineId");

                    b.ToTable("MedicationEffects");
                });

            modelBuilder.Entity("Data.Models.MedicationSchedule", b =>
                {
                    b.Property<int>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ScheduleId"));

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MedicineId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("TimeCategoryId")
                        .HasColumnType("int");

                    b.HasKey("ScheduleId");

                    b.HasIndex("MedicineId");

                    b.HasIndex("PatientId");

                    b.HasIndex("TimeCategoryId");

                    b.ToTable("MedicationSchedules");
                });

            modelBuilder.Entity("Data.Models.Medicine", b =>
                {
                    b.Property<int>("MedicineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("MedicineId"));

                    b.Property<string>("AdministrationMethod")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Form")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("GenericName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("MedicineId");

                    b.ToTable("Medicines");
                });

            modelBuilder.Entity("Data.Models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("PatientId"));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("varchar(24)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("RoomNo")
                        .HasColumnType("int");

                    b.HasKey("PatientId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Data.Models.QrCode", b =>
                {
                    b.Property<string>("QrCodeValue")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("QrCodeValue");

                    b.HasIndex("PatientId");

                    b.ToTable("QrCodes");
                });

            modelBuilder.Entity("Data.Models.ScheduleChangeLog", b =>
                {
                    b.Property<int>("ScheduleChangeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ScheduleChangeId"));

                    b.Property<string>("NewDosage")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("NewEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("NewStart")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("NewTimeCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("OldDosage")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("OldEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("OldStart")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("OldTimeCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("int");

                    b.HasKey("ScheduleChangeId");

                    b.HasIndex("NewTimeCategoryId");

                    b.HasIndex("OldTimeCategoryId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("ScheduleChangeLogs");
                });

            modelBuilder.Entity("Data.Models.TimeCategory", b =>
                {
                    b.Property<int>("TimeCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("TimeCategoryId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("TimeCategoryId");

                    b.ToTable("TimeCategories");
                });

            modelBuilder.Entity("Data.Models.MedAdministrationLog", b =>
                {
                    b.HasOne("Data.Models.MedicationSchedule", "MedicationSchedule")
                        .WithMany()
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicationSchedule");
                });

            modelBuilder.Entity("Data.Models.MedicationEffect", b =>
                {
                    b.HasOne("Data.Models.Medicine", "Medicine")
                        .WithMany()
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("Data.Models.MedicationSchedule", b =>
                {
                    b.HasOne("Data.Models.Medicine", "Medicine")
                        .WithMany()
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.TimeCategory", "TimeCategory")
                        .WithMany()
                        .HasForeignKey("TimeCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicine");

                    b.Navigation("Patient");

                    b.Navigation("TimeCategory");
                });

            modelBuilder.Entity("Data.Models.QrCode", b =>
                {
                    b.HasOne("Data.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Data.Models.ScheduleChangeLog", b =>
                {
                    b.HasOne("Data.Models.TimeCategory", "NewTimeCategory")
                        .WithMany()
                        .HasForeignKey("NewTimeCategoryId");

                    b.HasOne("Data.Models.TimeCategory", "OldTimeCategory")
                        .WithMany()
                        .HasForeignKey("OldTimeCategoryId");

                    b.HasOne("Data.Models.MedicationSchedule", "MedicationSchedule")
                        .WithMany()
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicationSchedule");

                    b.Navigation("NewTimeCategory");

                    b.Navigation("OldTimeCategory");
                });
#pragma warning restore 612, 618
        }
    }
}
